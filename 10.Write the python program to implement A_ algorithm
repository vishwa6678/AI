from queue import PriorityQueue

def a_star(graph, start, goal, h):
    open_set = PriorityQueue()
    open_set.put((0, start))
    came_from = {}
    g = {node: float('inf') for node in graph}
    g[start] = 0

    while not open_set.empty():
        _, current = open_set.get()

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            print("Path:", ' -> '.join(path[::-1]))
            return

        for neighbor, cost in graph[current].items():
            temp_g = g[current] + cost
            if temp_g < g[neighbor]:
                came_from[neighbor] = current
                g[neighbor] = temp_g
                f = temp_g + h[neighbor]
                open_set.put((f, neighbor))

graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'C': 2, 'D': 5},
    'C': {'D': 1},
    'D': {}
}
heuristic = {'A': 7, 'B': 6, 'C': 2, 'D': 0}

a_star(graph, 'A', 'D', heuristic)
